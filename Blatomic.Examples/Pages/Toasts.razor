@page "/toasts"

@inject ITheme Theme
@inject ToastService toastService

<PageTitle>Toasts</PageTitle>

<div class="leading-relaxed @TwColors.Text_Slate_600">
    <h1 class="text-2xl font-bold @TwColors.Text_Slate_900">Toasts</h1>

    <p class="my-2 p-4 bg-yellow-400 font-bold text-black rounded">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
        Warning: This does require specific setup, please follow guide below
    </p>

    <h3 class="text-xl font-bold mt-6 @TwColors.Text_Slate_900">How to setup?</h3>

    <p class="my-2 font-medium">
        Setup is easy, you just need to place the <b>ToastContainer</b> somewhere at a high level in your application. 
        It is recommended to place within the <b>App.razor</b> file. That's it. As long as you have registered the 
        services as shown in <a class="@TwColors.Text_Blue_900 hover:underline" href="">Installation</a> then you are all set to go.
    </p>

    <CodeBlock Title="App.razor" Code="@defaultExample2" />

    <h3 class="text-xl font-bold mt-6 @TwColors.Text_Slate_900">How to use?</h3>

    <p class="my-2 font-medium">
        Out toasts come pre-styled out of the box, however you can change the default styling be your own custom <b>RenderFragment</b> if you would like. 
        One huge benefit to this toast system is it will automatically set the time on screen for you <b>based on the content</b>. This means that
        if you place a large bit of content to show the user, it will stay on the screen for longer so that the user has time to read everything before
        it disappears.
    </p>

    <div class="mb-2">
        <Button OnClickedAsync="CreateToastSmall">Create Small Toast</Button>
        <Button OnClickedAsync="CreateToastLarge">Create Large Toast</Button>
    </div>

    <CodeBlock Title=".razor" Code="@defaultExample" />
</div>


@code {
    private string defaultExample = @"@inject ToastService toastService

<Button OnClickedAsync=""CreateToastSmall"">Create Small Toast</Button>
<Button OnClickedAsync=""CreateToastLarge"">Create Large Toast</Button>

@code {
    private void CreateToastSmall()
    {
        toastService.AddToast(new Toast()
            {
                Header = ""Short Toast"",
                Message = ""Not very much is here...""
            });
    }
    private void CreateToastLarge()
    {
        toastService.AddToast(new Toast()
            {
                Header = ""Long Toast"",
                Message = ""As you can see, this is ...""
            });
    }
}";
    private string defaultExample2 = @"@using Blatomic.Examples.Shared

<ToastContainer/>

<Router AppAssembly=""@typeof(MainLayout).Assembly"">
    <Found Context=""routeData"">
        <RouteView RouteData=""@routeData"" DefaultLayout=""@typeof(MainLayout)"" />
        <FocusOnNavigate RouteData=""@routeData"" Selector=""h1"" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout=""@typeof(MainLayout)"">
            <p role=""alert"">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>";

    private void CreateToastSmall()
    {
        toastService.AddToast(new Toast()
            {
                Header = "Short Toast",
                Message = "Not very much is here..."
            });
    }
    private void CreateToastLarge()
    {
        toastService.AddToast(new Toast()
            {
                Header = "Long Toast",
                Message = "As you can see, this is an extremely long bit of information that is on this card.. but because we are getting a word count of how many words you have given your user to read, we can set the time that it shows to how long the average person's 'words per minute' reading pace is (at a leasure rate) and give them a little extra time so that the notification doesn't disappear before they have the chance to finish reading all of it. And you don't have to worry about a thing 🙂. We take care of this automagically for you"
            });
    }
}
