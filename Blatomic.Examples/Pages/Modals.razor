@page "/modals"
@inject ITheme Theme
@inject NavigationManager Nav

<PageTitle>Modals</PageTitle>

<div class="leading-relaxed @TwColors.Text_Slate_600">
    <h1 class="text-2xl font-bold @TwColors.Text_Slate_900">Modals</h1>

    <h3 class="text-xl font-bold mt-6 @TwColors.Text_Slate_900">What are they?</h3>

    <p class="my-2 font-medium">
        Modals are a way for you to shift focus from the websites main content to an overlay. The default modal is an empty canvas
        which takes on the current theme and comes with an exit button and (if it is not a full screen modal) a selectable backdrop. 
        If the user clicks either of these then the modal will hide itself. 
        The programmer is responsible for display the modal to the user (usually by button click)
    </p>

    <div class="mb-2">
        <Button OnClickedAsync="() => isShowingFirstExample = true">
            Show Default Modal
        </Button>

        <Modal @bind-IsShowing="@isShowingFirstExample">
            <Header>
                Header
            </Header>
            <Body>
                Body
            </Body>
            <Footer>
                Footer
            </Footer>
        </Modal>
    </div>

    <CodeBlock Title=".razor" Code="@firstExample" />

    
    <p class="my-2 font-semibold">
        Lets break down this example into it's parts
    </p>

    <ol class="list-decimal ml-8 space-y-4 mt-2">
        <li>
            <p>
                First notice that we are using <b>@("@bind-IsShowing")</b>, this is to make sure that the variable reference that we have is updating
                when the modal closes itself and we can also close the modal programmatically whenever we need to.
            </p>
        </li>
        <li>
            <p>
                Next we have the <b>Header</b> section, this will be where you will usually place the title of the modal.
            </p>
        </li>
        <li>
            <p>
                Next we have the <b>Body</b> section, this is where you will put the main content of your modal
            </p>
        </li>
        <li>
            <p>
                Finally we have the <b>Footer</b> section where you can set any additional content usually used for actions (like agreeing or confirmation)
            </p>
            <p class="italic">
                Note: we <b>do not</b> need to declare the <b>footer</b>. It is an optional section that is there incase you would like to use it
            </p>
        </li>
    </ol>
        
    <p class="my-2">
        As you can see the modal component is very simple to work with. If you would like to go into more depth and look at the different sizing options available,
        check out the advanced section below.
    </p>

    <h3 class="text-xl font-bold mt-12 @TwColors.Text_Slate_900">Advanced</h3>

    <p class="my-2">
        Under Construction...
    </p>
</div>

@code {
    private string firstExample = @"<Button OnClickedAsync=""() => isShowingFirstExample = true"">
    Show Default Modal
</Button>

<Modal @bind-IsShowing=""@isShowingFirstExample"">
    <Header>
        Header
    </Header>
    <Body>
        Body
    </Body>
    <Footer>
        Footer
    </Footer>
</Modal>

@code {
    private bool isShowingFirstExample = false;
}";

    private bool isShowingFirstExample = false;
}
