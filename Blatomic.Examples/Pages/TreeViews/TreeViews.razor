@page "/treeViews"
@inject ITheme Theme

<PageTitle>Tree Views</PageTitle>

<div class="leading-relaxed @TwColors.Text_Slate_600">
    <h1 class="text-2xl font-bold @TwColors.Text_Slate_900">Tree Views</h1>

    <h3 class="text-xl font-bold mt-6 @TwColors.Text_Slate_900">What's so special?</h3>

    <p class="my-2 font-medium">
        Here is a super convoluted example of a tree view... This component basically allows you to
        handle nested components. You can insert any item template you would like to display your
        items. You can also override the open and close icons with your own templates.
    </p>

    <div class="mb-2">

        <Example1 />

    </div>
    
    <CodeBlock Title=".razor" Code="@example1" />
</div>


@code {
    private string example1 = @"@using Blatomic.Extensions

<TreeView Items=""@hierarchyData"" Context=""item"">
    <ItemsTemplate>
        @item.Name
    </ItemsTemplate>
</TreeView>

@code {
    private class TestHierarchy
    {
        public int Id { get; set; }     
        public int? ParentId { get; set; }
        public string Name { get; set; }
    }

    private List<TestHierarchy> testHierarchy = new()
        {
            new() { Id = 1, ParentId = null, Name = ""Top Level 1"" },
                new() { Id = 2, ParentId = 1, Name = ""Top Level 1.1"" },
                new() { Id = 3, ParentId = 1, Name = ""Top Level 1.2"" },
                    new() { Id = 12, ParentId = 3, Name = ""Top Level 1.2.1"" },
                new() { Id = 10, ParentId = 1, Name = ""Top Level 1.3"" },
                new() { Id = 11, ParentId = 1, Name = ""Top Level 1.4"" },
            new() { Id = 4, ParentId = null, Name = ""Top Level 2"" },
                new() { Id = 5, ParentId = 4, Name = ""Top Level 2.1"" },
                new() { Id = 6, ParentId = 4, Name = ""Top Level 2.2"" },
                new() { Id = 7, ParentId = 4, Name = ""Top Level 2.3"" },
                    new() { Id = 13, ParentId = 7, Name = ""Top Level 2.3.1"" },
                        new() { Id = 14, ParentId = 13, Name = ""Top Level 2.3.1.1"" },
                new() { Id = 8, ParentId = 4, Name = ""Top Level 2.4"" },
            new() { Id = 9, ParentId = null, Name = ""Top Level 3"" },
        };

    private IEnumerable<IHierarchicalData<TestHierarchy>> hierarchyData => testHierarchy.CreateHierarchy(t => t.Id, t => t.ParentId);
}";
}