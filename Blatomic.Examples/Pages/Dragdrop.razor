@page "/dragdrop"
@inject ITheme Theme

<PageTitle>Drag & Drop</PageTitle>

<div class="leading-relaxed @TwColors.Text_Slate_600">
    <h1 class="text-2xl font-bold @TwColors.Text_Slate_900">Drag & Drop</h1>

    <h3 class="text-xl font-bold mt-6 @TwColors.Text_Slate_900">What is it?</h3>

    <p class="my-2 font-medium">
        The drag and drop component makes it very easy to make items <b>draggable</b> and associate data with the item.
        Then you can make other areas <b>droppable</b> and place restrictions on what can and can't be dropped there.
        Below is showing the most basic implementation of this without restrictions. The user will get visual feedback
        on where they can and cannot place the dragged item. This will also work on touch devices like mobile!
    </p>

    <div class="mb-2 max-w-2xl flex justify-between p-4 border border-gray-400">
        <DragContext TData="int">
            <DragItem DragData="5" Copy="true">
                <div class="flex flex-col rounded-lg @Theme.Success.All">
                    <div class="p-4 border-b border-gray-500">Drag Me</div>
                    <div class="p-4">I contain a secret number</div>
                </div>
            </DragItem>
            <DropArea Context="Items">
                <div class="flex flex-col rounded-lg @Theme.Dark.All">
                    <div class="p-4 border-b border-gray-500">Drop item here to reveal it's number</div>
                    @foreach (var item in Items)
                    {
                        <div class="p-4">The secret number is @item</div>
                    }
                    @if (Items.Count > 2)
                    {
                        <div class="p-4">The number isn't going to change...</div>
                    }
                </div>
            </DropArea>
        </DragContext>
    </div>

    <CodeBlock Title=".razor" Code="@firstExample" />

    <p class="my-2 font-semibold">
        Lets break down this example into it's parts
    </p>

    <ol class="list-decimal ml-8 space-y-4 mt-2">
        <li>
            <p>
                First we have the <b>DragContext</b>, with this, we define what type of data we will be transferring.
                In this example we have chosen to use a simple <b>int</b>. This can be any data type and we
                will go into more complex examples below
            </p>
        </li>
        <li>
            <p>
                Next we have a <b>DragItem</b>, this has a property <b>DragData</b> that we have set to <b>5</b> (which
                matches the <b>int</b> datatype from the <b>DragContext</b>).
                Finally we have the <b>Copy</b> property set to <b>true</b> so that we produce a copy of the object
                after we drop it instead of it disappearing.
            </p>
            <p class="italic">
                Note: we <b>do not</b> need to declare the <b>DragData</b> or the <b>Copy</b> property for this example
                to work.
            </p>
        </li>
        <li>
            <p>
                Finally we have the <b>DropArea</b> where we have set the <b>Context</b> to <b>Items</b> so that we can
                recieve all of the items that are in or have been dropped into that area
            </p>
        </li>
    </ol>

    <p class="my-2">
        These are the three building blocks required for getting started with the drag and drop component
    </p>

    <h3 class="text-xl font-bold mt-12 @TwColors.Text_Slate_900">Advanced Usage</h3>

    <p class="my-2">
        Now lets take a deeper look into what we can do with drag and drop. In the example below we can see that the
        <b>Success Card</b> can not be dragged into
        the second area because it <b>can not</b> take data that is equal to 5. However, our new <b>Danger Card</b> can
        be dragged into that area because
        it contains the number <b>4</b>.
    </p>

    <div class="mb-2 max-w-4xl overflow-auto flex justify-between p-4 border border-gray-400">
        <DragContext TData="int">
            <div class="flex flex-col space-y-4">
                <DragItem DragData="5" Copy="true">
                    <div class="flex flex-col rounded-lg @Theme.Success.All">
                        <div class="p-4 border-b border-gray-500">Drag Me</div>
                        <div class="p-4">I contain a secret number</div>
                    </div>
                </DragItem>
                <DragItem DragData="4" Copy="true">
                    <div class="flex flex-col rounded-lg @Theme.Danger.All">
                        <div class="p-4 border-b border-gray-500">Drag Me</div>
                        <div class="p-4">I contain a secret number</div>
                    </div>
                </DragItem>
            </div>
            <DropArea Context="Items">
                <div class="flex flex-col rounded-lg @Theme.Dark.All">
                    <div class="p-4 border-b border-gray-500">Drop <b>any</b> item here</div>
                    @foreach (var item in Items)
                    {
                        <div class="p-4">The secret number is @item</div>
                    }
                    @if (Items.Count > 2)
                    {
                        <div class="p-4">The number did change this time!</div>
                    }
                </div>
            </DropArea>
            <DropArea Context="Items"
                CanDropAsync="@((item) => item.Data != 5 ? Task.FromResult(true) : Task.FromResult(false))">
                <div class="flex flex-col rounded-lg @Theme.Dark.All">
                    <div class="p-4 border-b border-gray-500">I can not take data that equals 5</div>
                    @foreach (var item in Items)
                    {
                        <div class="p-4">The secret number is @item</div>
                    }
                    @if (Items.Count > 2)
                    {
                        <div class="p-4">The number isn't going to change...</div>
                    }
                </div>
            </DropArea>
        </DragContext>
    </div>

    <CodeBlock Title=".razor" Code="@secondExample" />

    <h3 class="text-xl font-bold mt-12 @TwColors.Text_Slate_900">Advanced Example</h3>

    <p class="my-2">
        Let's make the one thing that everyone associates with drag and drop. A Kanban Board.
    </p>

    <div class="mb-2 overflow-auto flex justify-between">
        <DragContext TData="Card" ShowAllDropAreas="false">
            <DropArea Context="Items" Items="@cards" OnDropCompleteAsync="MarkToDoCard">
                <div class="border border-gray-400 p-4 w-96">
                    <h2 class="border-b border-gray-500 mb-2">Backlog</h2>
                    <div class="flex flex-col space-y-2">
                        @foreach (var item in Items)
                        {
                            @CardFragment(item)
                        }
                    </div>
                </div>
            </DropArea>
            <DropArea Context="Items" TData="Card" CanDropAsync="SeverityCheck" OnDropCompleteAsync="MarkInProgressCard">
                <div class="border border-gray-400 p-4 w-96">
                    <h2 class="border-b border-gray-500 mb-2">Severe Items</h2>
                    <div class="flex flex-col space-y-2">
                        @foreach (var item in Items)
                        {
                            @CardFragment(item)
                        }
                    </div>
                </div>
            </DropArea>
            <DropArea Context="Items" TData="Card" CanDropAsync="ProgressCheck" OnDropCompleteAsync="CompleteCard">
                <div class="border border-gray-400 p-4 w-96">
                    <h2 class="border-b border-gray-500 mb-2">Completed</h2>
                    <div class="flex flex-col space-y-2">
                        @foreach (var item in Items)
                        {
                            @CardFragment(item)
                        }
                    </div>
                </div>
            </DropArea>
        </DragContext>
    </div>
    
    <CodeBlock Title=".razor" Code="@kanbanExample" />
</div>

@code {
    Task<bool> SeverityCheck(DragArgs<Card> card)
    {
        var severity = card?.Data?.Severity;
        return Task.FromResult(severity == "Medium");
    }
    Task<bool> ProgressCheck(DragArgs<Card> card)
    {
        return Task.FromResult(card?.Data?.Status == "In Progress");
    }
    Task MarkToDoCard(DragArgs<Card> card)
    {        
        card.Data.Status = "To Do";
        card.Data.Severity = "Medium";
        return Task.CompletedTask;
    }
    Task MarkInProgressCard(DragArgs<Card> card)
    {        
        card.Data.Status = "In Progress";
        card.Data.Severity = "High";
        return Task.CompletedTask;
    }
    Task CompleteCard(DragArgs<Card> card)
    {
        card.Data.Status = "Complete";
        card.Data.Severity = "Done";
        return Task.CompletedTask;
    }

    List<Card> cards = new()
    {
        new Card()
        {
            Name = "Install Blatomic",
            Description = "Need to go to the docs and go through the install page",
            Severity ="Medium",
            Status = "To Do"
        },
        new Card()
        {
            Name = "Learn Blatomic",
            Description = "Go through the docs and get aquanted with all of the components and services",
            Severity ="Medium",
            Status = "To Do"
        },
        new Card()
        {
            Name = "Have Fun with Blatomic",
            Description = "Use blatomic in a personal project and give it a star on github if you like 😉",
            Severity ="Medium",
            Status = "To Do"
        },
    };

    class Card
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Severity { get; set; }
        public string Status { get; set; }
    }

    private RenderFragment<Card> CardFragment = card => __builder =>
    {
        string color = "bg-green-600 dark:bg-green-400";
        if (@card.Severity == "High")
        {
            color = "bg-red-600 dark:b-bg-red-400";
        }
        else if  (@card.Severity == "Medium")
        {
            color = "bg-yellow-600 dark:b-bg-yellow-500";
        }
        <DragItem TData="Card" DragData="@card">
            <div class="flex flex-col rounded-lg text-white dark:text-black @color">
                <div class="p-2 border-b border-gray-500">
                    @card.Name - <b>@card.Status</b> (@card.Severity)
                </div>
                <div class="p-2">@card.Description</div>
            </div>
    </DragItem>
    };

    private string kanbanExample = @"<DragContext TData=""Card"" ShowAllDropAreas=""false"">
    <DropArea Context=""Items"" Items=""@cards"" OnDropCompleteAsync=""MarkToDoCard"">
        <div class=""border border-gray-400 p-4 w-96"">
            <h2 class=""border-b border-gray-500 mb-2"">Backlog</h2>
            <div class=""flex flex-col space-y-2"">
                @foreach (var item in Items)
                {
                    @CardFragment(item)
                }
            </div>
        </div>
    </DropArea>
    <DropArea Context=""Items"" TData=""Card"" CanDropAsync=""SeverityCheck"" OnDropCompleteAsync=""MarkInProgressCard"">
        <div class=""border border-gray-400 p-4 w-96"">
            <h2 class=""border-b border-gray-500 mb-2"">Severe Items</h2>
            <div class=""flex flex-col space-y-2"">
                @foreach (var item in Items)
                {
                    @CardFragment(item)
                }
            </div>
        </div>
    </DropArea>
    <DropArea Context=""Items"" TData=""Card"" CanDropAsync=""ProgressCheck"" OnDropCompleteAsync=""CompleteCard"">
        <div class=""border border-gray-400 p-4 w-96"">
            <h2 class=""border-b border-gray-500 mb-2"">Completed</h2>
            <div class=""flex flex-col space-y-2"">
                @foreach (var item in Items)
                {
                    @CardFragment(item)
                }
            </div>
        </div>
    </DropArea>
</DragContext>

@code {
    Task<bool> SeverityCheck(DragArgs<Card> card)
    {
        var severity = card?.Data?.Severity;
        return Task.FromResult(severity == ""Medium"");
    }
    Task<bool> ProgressCheck(DragArgs<Card> card)
    {
        return Task.FromResult(card?.Data?.Status == ""In Progress"");
    }
    Task MarkToDoCard(DragArgs<Card> card)
    {        
        card.Data.Status = ""To Do"";
        card.Data.Severity = ""Medium"";
        return Task.CompletedTask;
    }
    Task MarkInProgressCard(DragArgs<Card> card)
    {        
        card.Data.Status = ""In Progress"";
        card.Data.Severity = ""High"";
        return Task.CompletedTask;
    }
    Task CompleteCard(DragArgs<Card> card)
    {
        card.Data.Status = ""Complete"";
        card.Data.Severity = ""Done"";
        return Task.CompletedTask;
    }

    List<Card> cards = new()
    {
        new Card()
        {
            Name = ""Install Blatomic"",
            Description = ""Need to go to the docs and go through the install page"",
            Severity =""Medium"",
            Status = ""To Do""
        },
        new Card()
        {
            Name = ""Learn Blatomic"",
            Description = ""Go through the docs and get aquanted with all of the components and services"",
            Severity =""Medium"",
            Status = ""To Do""
        },
        new Card()
        {
            Name = ""Have Fun with Blatomic"",
            Description = ""Use blatomic in a personal project and give it a star on github if you like 😉"",
            Severity =""Medium"",
            Status = ""To Do""
        },
    };

    class Card
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Severity { get; set; }
        public string Status { get; set; }
    }

    private RenderFragment<Card> CardFragment = card => __builder =>
    {
        string color = ""bg-green-600 dark:bg-green-400"";
        if (@card.Severity == ""High"")
        {
            color = ""bg-red-600 dark:b-bg-red-400"";
        }
        else if  (@card.Severity == ""Medium"")
        {
            color = ""bg-yellow-600 dark:b-bg-yellow-500"";
        }
        <DragItem TData=""Card"" DragData=""@card"">
            <div class=""flex flex-col rounded-lg text-white dark:text-black @color"">
                <div class=""p-2 border-b border-gray-500"">
                    @card.Name - <b>@card.Status</b> (@card.Severity)
                </div>
                <div class=""p-2"">@card.Description</div>
            </div>
        </DragItem>
    };
}";

    private string firstExample = @"@inject ITheme Theme
<DragContext TData=""int"">
    <DragItem DragData=""5"" Copy=""true"">
        <div class=""flex flex-col rounded-lg @Theme.Success.All"">
            <div class=""p-4 border-b border-gray-500"">Card</div>
            <div class=""p-4"">I contain a secret number</div>
        </div>
    </DragItem>
    <DropArea Context=""Items"">
        <div class=""flex flex-col rounded-lg @Theme.Dark.All"">
        <div class=""p-4 border-b border-gray-500"">Drop item here to reveal it's number</div>
        @foreach (var item in Items)
        {
            <div class=""p-4"">The secret number is @item</div>
        }
        @if (Items.Count > 2)
        {
            <div class=""p-4"">The number isn't going to change...</div>
        }
        </div>
    </DropArea>
</DragContext>";

    private string secondExample = @"@inject ITheme Theme
<DragContext TData=""int"">
    <div class=""flex flex-col space-y-4"">
        <DragItem DragData=""5"" Copy=""true"">
            <div class=""flex flex-col rounded-lg @Theme.Success.All"">
                <div class=""p-4 border-b border-gray-500"">Drag Me</div>
                <div class=""p-4"">I contain a secret number</div>
            </div>
        </DragItem>
        <DragItem DragData=""4"" Copy=""true"">
            <div class=""flex flex-col rounded-lg @Theme.Danger.All"">
                <div class=""p-4 border-b border-gray-500"">Drag Me</div>
                <div class=""p-4"">I contain a secret number</div>
            </div>
        </DragItem>
    </div>
    <DropArea Context=""Items"">
        <div class=""flex flex-col rounded-lg @Theme.Dark.All"">
            <div class=""p-4 border-b border-gray-500"">Drop <b>any</b> item here</div>
            @foreach (var item in Items)
            {
                <div class=""p-4"">The secret number is @item</div>
            }
            @if (Items.Count > 2)
            {
                <div class=""p-4"">The number did change this time!</div>
            }
        </div>
    </DropArea>
    <DropArea Context=""Items""
              CanDropAsync=""@((item) => item.Data != 5 ? Task.FromResult(true) : Task.FromResult(false))"">
        <div class=""flex flex-col rounded-lg @Theme.Dark.All"">
            <div class=""p-4 border-b border-gray-500"">I can not take data that equals 5</div>
            @foreach (var item in Items)
            {
                <div class=""p-4"">The secret number is @item</div>
            }
            @if (Items.Count > 2)
            {
                <div class=""p-4"">The number isn't going to change...</div>
            }
        </div>
    </DropArea>
</DragContext>";
}
