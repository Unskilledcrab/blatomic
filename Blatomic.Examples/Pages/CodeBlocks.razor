@page "/codeblocks"
@inject ITheme Theme

<PageTitle>Code Block</PageTitle>

<div class="leading-relaxed @TwColors.Text_Slate_600">
    <h1 class="text-2xl font-bold @TwColors.Text_Slate_900">Code Block</h1>

    <h3 class="text-xl font-bold mt-6 @TwColors.Text_Slate_900">What is it?</h3>

    <p class="my-2 font-medium">
        This is a component that you can pass your own (or use our's) quick and dirty parser rules for basic syntax highlighting and to allow the user to easily copy the code to their clipboard
    </p>

    <div class="mb-2">

        <CodeBlock Title=".razor" Code="@defaultExample" />

    </div>
    
    <p class="my-2 font-medium">
        Code block inseption.. Let see how to make the code block above with the code block below 😝
    </p>

    <CodeBlock Title=".razor" Code="@exampleExplained" />
    
    <h3 class="text-xl font-bold mt-6 @TwColors.Text_Slate_900 mt-12">Advanced</h3>

    <p class="my-2 font-medium">
        So by default it will parse everything with the <b>CSharpLanguage</b> that comes with the library. However you can make your own language following the <b>ILanguage</b> interface.
        Lets take a look at the <b>CSharpLanguage</b> to explain how to go about creating your own. Note this is a very crude implementation and does not <i>exactly</i> following
        the guidelines of a typical parser for a compiler.
    </p>
    
    <CodeBlock Title=".razor" Code="@cSharpLanguage" />
</div>


@code {
    private string defaultExample = @"private int test = 1030;";
    private string exampleExplained = @"<CodeBlock Title="".razor"" Code=""@defaultExample"" />

@code {
    private string defaultExample = @""private int test = 1030;"";
}";

    private string cSharpLanguage = @"public class CSharpLanguage : ILanguage
{
    /// When the parser sees these as the next token, 
    /// it will stop looking ahead to combine the previous tokens 
    /// and will begin scanning again from the break point    
    public HashSet<char> BreakCharacters { get; set; } = new()
    {
        '\\',
        '/',
        '""',
        ' '
    };

    /// When the parser finds these tokens, it will stop scanning the 
    /// line at that index and colorize everything until the end of the 
    /// line with this color    
    public TokenPalette SingleLineCommentPalette { get; set; } = new()
    {
        Color = ""text-green-300"",
        Tokens = new HashSet<string>()
        {
            ""//""
        }
    };

    /// The parse will use this token to continue scanning the line 
    /// until it either reaches the end of the line, 
    /// or finds another string literal token    
    public TokenPalette StringLiteralPalette { get; set; } = new()
    {
        Color = ""text-orange-400"",
        Tokens = new HashSet<string>()
        {
            @"",""
            @""'"",
        }
    };

    /// Any time these tokens are found followed by a break or symbol token,
    /// they will be colorized    
    public TokenPalette[] KeywordPalette { get; set; } = new TokenPalette[] 
    {
        new()
        {
            Color = ""text-blue-500"",
            Tokens = new()
            {
                ""using"",
                ""namespace"",

                ""class"",
                ""enum"",
                ""new"",

                ""internal"",
                ""abstract"",
                ""event"",
                ""as"",
                ""explicit"",
                ""base"",
                ""extern"",
                ""null"",
                ""struct"",
                ""object"",
                ""byte"",
                ""fixed"",
                ""out"",
                ""throw"",
                ""float"",
                ""async"",
                ""override"",
                ""static"",
                ""public"",
                ""private"",
                ""protected"",
                ""override"",

                ""try"",
                ""catch"",
                ""finally"",

                ""void"",
                ""this"",
                ""string"",
                ""int"",
                ""bool"",
                ""true"",
                ""false"",
            }
        },
        new()
        {
            Color = ""text-purple-400"",
            Tokens = new()
            {
                ""@code"",
                ""@inject"",
                ""@inherit"",
                ""@using"",
                ""@page"",
                ""@foreach"",
                ""@if"",

                ""var"",
                ""await"",
                ""for"",
                ""foreach"",
                ""in"",
                ""switch"",
                ""case"",
                ""if"",
                ""else"",
                ""return"",
            }
        },
        new()
        {
            Color = ""text-emerald-500"",
            Tokens = new()
            {
                ""List"",
                ""Task"",
            }
        },
    };

    /// Anytime these symbols are found as the next character, 
    /// the parser will combine the current scanned token and then colorize the symbol    
    public TokenPalette SymbolPalette { get; set; } = new()
    {
        Color = ""text-white"",
        Tokens = new()
        {
            ""("",
            "")"",
            ""{"",
            ""}"",
            ""<"",
            "">"",
            "";"",
            ""="",
            "":"",
            ""."",
        }
    };

    /// If the parser looks ahead and finds this symbol, 
    /// it will colorize the current token    
    public TokenPalette[] LookAheadPalette { get; set; } = new[]
    {
        new TokenPalette()
        {
            Color = ""text-sky-300"",
            Tokens = new()
            {
                ""="",
                ""."",
            }
        },
        new TokenPalette()
        {
            Color = ""text-yellow-400"",
            Tokens = new()
            {
                ""("",
            }
        },
    };

    /// If the parser looks behind and finds this symbol, 
    /// it will colorize everything to the next symbol token or break token    
    public TokenPalette[] LookBehindPalette { get; set; } = new[]
    {
        new TokenPalette()
        {
            Color = ""text-green-500"",
            Tokens = new()
            {
                ""<"",
            }
        },
    };
}";
}
