@inject ITheme Theme

@if (BoundIsShowing)
{
    @if (ShowBackdrop)
    {
        <Backdrop OnBackdropClick="(() => BoundIsShowing = false)" />
    }
    <div class="b-fixed b-z-10 b-p-4 b-overflow-auto @Position.PanelStyle() @Palette?.All">
        <div class="b-flex b-justify-between b-items-center b-pb-4">
            <div>
                @Header
            </div>
            
            <DismissButton OnClickAsync="() => BoundIsShowing = !BoundIsShowing" />
        </div>
        <div>
            @ChildContent
        </div>
    </div>
}

@code {
    private bool BoundIsShowing
    {
        get => IsShowing;
        set
        {
            IsShowing = value;
            IsShowingChanged.InvokeAsync(value);
        }
    }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public bool IsShowing { get; set; } = false;
    [Parameter] public EventCallback<bool> IsShowingChanged { get; set; }
    [Parameter] public bool ShowBackdrop { get; set; } = true;
    [Parameter] public Position Position { get; set; } = Position.Left;
    [Parameter] public Palette? Palette { get; set; }

    protected override void OnInitialized()
    {
        if (Palette is null)
        {
            Palette = Theme.Light;
        }
        base.OnInitialized();
    }
}
