@inject ITheme Theme

@if (BoundIsShowing)
{
    @if (ShowBackdrop)
    {
        <Backdrop OnBackdropClick="(() => BoundIsShowing = false)" />
    }
    <div class="fixed z-10 @Position.PanelStyle() p-4 @Theme.Light.All overflow-auto">
        <div class="flex justify-between items-center pb-4">
            <div>
                @Header
            </div>
            <div>
                <div class="cursor-pointer hover:text-white hover:bg-gray-300 p-1 rounded" @onclick="() => BoundIsShowing = !IsShowing">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </div>
            </div>
        </div>
        <div>
            @ChildContent
        </div>
    </div>
}

@code {
    private bool BoundIsShowing
    {
        get => IsShowing;
        set
        {
            IsShowing = value;
            IsShowingChanged.InvokeAsync(value);
        }
    }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public bool IsShowing { get; set; } = false;
    [Parameter] public EventCallback<bool> IsShowingChanged { get; set; }
    [Parameter] public bool ShowBackdrop { get; set; } = true;
    [Parameter] public Position Position { get; set; } = Position.Left;
}
