@inject ITheme Theme

<div @ref="@elementReference" id="@guid" class="b-relative @activeIndex">    
    <CascadingValue Value="this">
        <div class="@activeAnimation">
            @ChildContent
        </div>
    </CascadingValue>
    <div class="b-absolute b-p-4 b-rounded-lg b-border-2 @Shadow.Standard(ShadowType.Medium) @positionStyle @marginStyle @arrowStyle @activeVisibility @Palette?.All">
        @HelpContent
        <div class="b-flex b-justify-around b-items-center b-pt-4">
            <Button OnClickedAsync="EndGuide" Palette="@Theme.SecondaryOutline" RoundedStyle="RoundedStyle.Full">End</Button>
            @if (hasPrevious)
            {
                <Button OnClickedAsync="PreviousStep" RoundedStyle="RoundedStyle.Full">Previous</Button>
            }
            @if (hasNext)
            {
                <Button OnClickedAsync="NextStep" RoundedStyle="RoundedStyle.Full">Next</Button>
            }
        </div>
    </div>
</div>


@code {
    [CascadingParameter] public GuideContext? Context {get; set;}
    [CascadingParameter] public GuideStep? StepContext {get; set;}

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? HelpContent { get; set; }
    [Parameter] public int Step { get; set; } = 0;
    [Parameter] public Position Position { get; set; } = Position.Bottom;
    [Parameter] public Palette? Palette { get; set; }

    public int internalIndex = 0;
    public string guid { get; } = $"a{Guid.NewGuid()}";
    public bool isActive = false;
    public bool isInContext = false;
    public bool hasPrevious = false;
    public bool hasNext = false;
    public bool HasSubSteps => subSteps.Count > 0;
    public List<GuideStep> SubSteps => subSteps;

    private ElementReference elementReference;
    private string activeIndex => isActive || isInContext ? "b-z-50" : "b-z-0";
    private string activeVisibility => isActive ? "b-visible b-opacity-100" : "b-invisible b-opacity-0";
    private string activeAnimation => isActive ? $"b-outline-4 {Theme.Primary.Outline} b-outline" : string.Empty;
    private string positionStyle => Position.AbsoluteStyle();
    private string arrowStyle => Position.ArrowStyle();
    private string marginStyle => Position.MarginStyle();
    private List<GuideStep> subSteps = new();

    protected override void OnInitialized()
    {
        if (Palette is null)
        {
            Palette = Theme.Light;
        }

        base.OnInitialized();
        Context?.AddStep(this);
        StepContext?.AddSubStep(this);
    }

    public void AddSubStep(GuideStep step)
    {
        subSteps.Add(step);
    }

    public void ShowParentStep()
    {
        if (StepContext is not null)
        {
            StepContext.isInContext = true;
            StepContext.ShowParentStep();
        }
    }

    public void HideParentStep()
    {
        if (StepContext is not null)
        {
            StepContext.isInContext = false;
            StepContext.HideParentStep();
        }
    }

    public void ShowSubSteps()
    {
        foreach (var step in subSteps)
        {
            step.isInContext = true;
            step.ShowSubSteps();
        }
        StateHasChanged();
    }

    public void HideSubSteps()
    {
        foreach (var step in subSteps)
        {
            step.isInContext = false;
            step.HideSubSteps();
        }
        StateHasChanged();
    }

    public void ActiveStep(bool hasPrevious, bool hasNext)
    {
        this.hasPrevious = hasPrevious;
        this.hasNext = hasNext;
        isActive = true;
        ShowSubSteps();
        ShowParentStep();
    }

    public void DeactiveStep()
    {
        isActive = false;
        HideSubSteps();
        HideParentStep();
    }

    private void EndGuide()
    {
        Context?.EndGuide();
    }

    private void PreviousStep()
    {
        DeactiveStep();
        Context?.PreviousStep();
    }

    private void NextStep()
    {
        DeactiveStep();
        Context?.NextStep();
    }
}
