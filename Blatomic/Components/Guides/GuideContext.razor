@if (BoundIsShowing)
{
    <Backdrop ZIndexClass="b-z-40" />
}
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool BoundIsShowing
    {
        get => IsShowing;
        set
        {
            IsShowing = value;
            IsShowingChanged.InvokeAsync(value);
        }
    }
    private bool isShowing = false;
    [Parameter]
    public bool IsShowing
    {
        get => isShowing;
        set
        {
            if (value == isShowing)
            {
                return;
            }
            isShowing = value;

            if (isShowing)
            {
                ActiveStep();
            }
            else
            {
                DeactiveStep();
            }
        }
    }

    [Parameter] public EventCallback<bool> IsShowingChanged { get; set; }

    private string visible => BoundIsShowing ? "b-visible b-opacity-100" : "b-invisible b-opacity-0";
    private int currentStep = 0;
    private List<GuideStep> Steps = new();
    private List<GuideStep> orderedSteps => Steps.OrderBy(s => s.internalIndex).ToList();

    private void ActiveStep()
    {
        var hasPrevious = true;
        var hasNext = true;
        if (currentStep == Steps.Count - 1)
        {
            hasNext = false;
        }
        if (currentStep == 0)
        {
            hasPrevious = false;
        }
        orderedSteps[currentStep].ActiveStep(hasPrevious, hasNext);
        StateHasChanged();
    }

    private void DeactiveStep()
    {
        orderedSteps[currentStep].DeactiveStep();
        StateHasChanged();
    }

    public void EndGuide()
    {
        BoundIsShowing = false;
    }

    public void PreviousStep()
    {
        currentStep--;
        ActiveStep();
    }

    public void NextStep()
    {
        currentStep++;
        ActiveStep();
    }

    public void AddStep(GuideStep step)
    {
        Steps.Add(step);
    }

    private void ReorderIndexes()
    {
        foreach (var currentStep in Steps)
        {
            currentStep.internalIndex = 0;
        }

        for (var i = 0; i < Steps.Count; i++)
        {
            var currentStep = Steps[i];

            if (currentStep.internalIndex != 0)
            {
                continue;
            }

            if (currentStep.Step != 0)
            {
                currentStep.internalIndex = currentStep.Step;
                continue;
            }

            currentStep.internalIndex = i + 1;
            if (currentStep.HasSubSteps)
            {
                foreach (var substep in currentStep.SubSteps)
                {
                    substep.internalIndex = i + 1;
                }
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            ReorderIndexes();
        }
    }
}
