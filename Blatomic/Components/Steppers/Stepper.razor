<CascadingValue Value="this">
    <div class="flex items-center bg-gray-100 p-4">
        @for (var i = 0; i < steps.Count; i++)
        {
            var stepCount = i;
            <a class="flex-initial flex flex-col items-center cursor-pointer" @onclick="@(() => GoToStep(stepCount))">
                <div class="rounded-full h-8 w-8 p-1 text-center align-middle transition @(i <= currentStepIndex ? "bg-green-300" : "bg-gray-200")">@(i + 1)</div>
                <div>@steps[i].Title</div>
            </a>
            @if (i < steps.Count - 1)
            {
                <div class="grow border-2 -mt-6 transition @(i < currentStepIndex ? "border-green-300" : "border-gray-200")"></div>
            }
        }
    </div>
    <div>
        @ContentArea
        @ChildContent
    </div>
    <div class="flex @buttonJustify items-center bg-gray-100 p-4">
        @if (currentStepIndex != 0)
        {
            <div class="justify-self-start">
                <Button OnClickedAsync="PreviousStep"
                    RoundedStyle="RoundedStyle.XL"
                    Css="@ButtonColors">
                    Previous
                </Button>
            </div>
        }
        @if (currentStepIndex != steps.Count - 1)
        {
            <div class="justify-self-end">
                <Button OnClickedAsync="NextStep"
                    RoundedStyle="RoundedStyle.XL"
                    Css="@ButtonColors">
                    Next
                </Button>
            </div>
        }
    </div>
</CascadingValue>

@code {
    [Parameter] public string? ButtonColors { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private string buttonJustify => currentStepIndex == 0 ? "justify-end" : "justify-between";
    private int currentStepIndex = 0;
    private List<Step> steps = new();
    private RenderFragment? ContentArea { get; set; }
    private Task<bool> IsStepValid => steps is null ? Task.FromResult(false) : steps[currentStepIndex].OnValidateStep(steps[currentStepIndex].Data);        

    public async Task GoToStep(int step)
    {
        if (step < 0 || step >= steps.Count)
        {
            return;
        }
        while (currentStepIndex < step)
        {
            await NextStep();
        }
        if (currentStepIndex > step)
        {
            currentStepIndex = step;
            RenderStep();
        }
    }

    private async Task NextStep()
    {
        if (await IsStepValid)
        {
            currentStepIndex++;
            RenderStep();
        }
    }

    private void PreviousStep()
    {
        currentStepIndex--;
        RenderStep();
    }

    private void RenderStep()
    {
        var currentStep = steps[currentStepIndex];
        ContentArea = currentStep.ChildContent;
    }

    public void AddStep(Step step)
    {
        steps.Add(step);
        if (currentStepIndex == steps.Count - 1)
        {
            RenderStep();
        }
        StateHasChanged();
    }
}
