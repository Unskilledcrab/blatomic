@inject ITheme Theme

<CascadingValue Value="this">
    <div class="b-flex b-flex-col">

        <div class="b-flex b-items-start b-justify-around b-p-4 b-max-width-full b-overflow-x-auto @PanelColors">
            @for (var i = 0; i < steps.Count; i++)
            {
                var stepCount = i;
                <a class="b-shrink-0 b-flex-initial b-flex b-flex-col b-items-center b-cursor-pointer b-relative" @onclick="@(() => GoToStep(stepCount))">
                    <div class="b-rounded-full b-z-[1] b-h-8 b-w-8 b-p-1 b-text-center b-align-middle b-transition b-duration-500 @(i <= currentStepIndex ? FillActiveColors : FillInactiveColors)">@(i + 1)</div>
                    <div>@steps[i].Title</div>
                    @if (i > 0)
                    {
                        <div class="b-absolute b-left-0 b-w-1/2 b-mt-3">
                            <div class="b-w-full b-h-1 b-pointer-events-none b-transition b-duration-1000 @(i <= currentStepIndex ? FillActiveColors : FillInactiveColors)"></div>
                        </div>
                    }
                    @if (i < steps.Count - 1)
                    {
                        <div class="b-absolute b-right-0 b-w-1/2 b-mt-3">
                            <div class="b-w-full b-h-1 b-pointer-events-none b-transition b-duration-1000 @(currentStepIndex > i ? FillActiveColors : FillInactiveColors)"></div>
                        </div>
                    }
                </a>
                @if (i < steps.Count - 1)
                {
                    <div class="b-w-full b-border-2 b-mt-3 b-transition b-duration-1000  @(i < currentStepIndex ? FillActiveColors : FillInactiveColors)"></div>
                }
            }
        </div>
        <div class="b-grow @ContentColors">
            @ContentArea
            @ChildContent
        </div>
        <div class="b-flex @buttonJustify b-items-center b-p-4 @PanelColors">
            @if (currentStepIndex != 0)
            {
                <div class="b-justify-self-start">
                    <Button OnClickedAsync="PreviousStep"
                        RoundedStyle="RoundedStyle.XL">
                        Previous
                    </Button>
                </div>
            }
            @if (currentStepIndex != steps.Count - 1)
            {
                <div class="b-justify-self-end">
                    <Button OnClickedAsync="@(() => NextStep())"
                        RoundedStyle="RoundedStyle.XL"
                        IsDisabled="!IsStepComplete">
                        Next
                    </Button>
                </div>
            }
        </div>

    </div>
</CascadingValue>

@code {
    [Parameter] public string PanelColors { get; set; } = "b-bg-gray-200 dark:b-bg-gray-800 b-text-gray-900 dark:b-text-gray-100";
    [Parameter] public string ContentColors { get; set; } = "b-bg-gray-100 dark:b-bg-gray-900 b-text-gray-900 dark:b-text-gray-100";
    [Parameter] public string FillActiveColors { get; set; } = "b-bg-green-400 dark:b-bg-green-600 b-border-green-400 dark:b-border-green-600";
    [Parameter] public string FillInactiveColors { get; set; } = "b-bg-gray-300 dark:b-bg-gray-700 b-border-gray-300 dark:b-border-gray-700";
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private string buttonJustify => currentStepIndex == 0 ? "b-justify-end" : "b-justify-between";
    private int currentStepIndex = 0;
    private List<Step> steps = new();
    private RenderFragment? ContentArea { get; set; }
    private bool IsStepComplete => steps == null || currentStepIndex >= steps.Count ? false : steps[currentStepIndex].IsStepComplete;

    public void GoToStep(int step)
    {
        if (step < 0 || step >= steps.Count)
        {
            return;
        }
        while (currentStepIndex < step)
        {
            if (!NextStep())
            {
                break;
            }
        }
        if (currentStepIndex > step)
        {
            currentStepIndex = step;
            RenderStep();
        }
    }

    private bool NextStep()
    {
        if (IsStepComplete)
        {
            currentStepIndex++;
            RenderStep();
            return true;
        }
        return false;
    }

    private void PreviousStep()
    {
        currentStepIndex--;
        RenderStep();
    }

    private void RenderStep()
    {
        var currentStep = steps[currentStepIndex];
        ContentArea = currentStep.ChildContent;
        StateHasChanged();
    }

    public void AddStep(Step step)
    {
        steps.Add(step);
        if (currentStepIndex == steps.Count - 1)
        {
            RenderStep();
        }
        StateHasChanged();
    }

    public void Refresh()
    {
        StateHasChanged();
    }
}
