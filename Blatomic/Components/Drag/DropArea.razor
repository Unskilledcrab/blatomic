@typeparam TData

<div class="relative @dropClass" ondragover="event.preventDefault();"
    ondragstart="event.dataTransfer.setData('', event.target.id);" @ondragenter="HandleDragEnter">

    <CascadingValue Value="this">
        @if (ChildContent is not null)
        {
            @ChildContent(Items)
        }
    </CascadingValue>
    @if (isShowingDrop)
    {
        <div class="absolute z-20 flex justify-center items-center inset-0 bg-gray-300/25"
        @ondragleave="HandleDragLeave" @ondrop="HandleDrop">
            @if (canDrop)
            {
                @CanDropTemplate
            }
            else
            {
                @CannotDropTemplate
            }
        </div>
    }
</div>

@code {
    private string dropClass = string.Empty;
    private bool isShowingDrop = false;
    private bool canDrop = false;

    [CascadingParameter] public DragContext<TData>? Context { get; set; }

    [Parameter] public List<TData> Items { get; set; } = new();

    [Parameter] public Func<DragArgs<TData>, Task<bool>> ShouldDropAsync { get; set; } = (dropItem) => Task.FromResult(true);
    [Parameter] public Func<DragArgs<TData>, Task> OnDragEnterAsync { get; set; } = (dropItem) => Task.CompletedTask;
    [Parameter] public Func<DragArgs<TData>, Task> OnDragLeaveAsync { get; set; } = (dropItem) => Task.CompletedTask;
    [Parameter] public Func<DragArgs<TData>, Task> BeforeDropAsync { get; set; } = (dropItem) => Task.CompletedTask;
    [Parameter] public Func<DragArgs<TData>, Task> OnDropAsync { get; set; } = (dropItem) => Task.CompletedTask;
    [Parameter] public string DropClass { get; set; } = "outline-2 outline-dashed";

    [Parameter] public RenderFragment<List<TData>>? ChildContent { get; set; }
    [Parameter] public RenderFragment? CanDropTemplate { get; set; } = @Plus.StandardPlusOutline;
    [Parameter] public RenderFragment? CannotDropTemplate { get; set; } = @Ban.StandardBanSolid;

    public void RemoveDragItem(TData dragItem)
    {
        if (dragItem is not null)
        {
            if (Items.Remove(dragItem))
            {
                StateHasChanged();
            }
        }
    }
    public void AddDragItem(TData dragItem)
    {
        if (dragItem is not null)
        {
            Items.Remove(dragItem);
        }
    }

    private void ShowDroppableStyle()
    {
        isShowingDrop = true;
        dropClass = DropClass;
    }

    private void HideDroppableStyle()
    {
        isShowingDrop = false;
        dropClass = string.Empty;
    }

    private async Task HandleDragEnter(DragEventArgs e)
    {
        if (Context == null || Context.DragData == null)
        {
            return;
        }

        var args = e.Create(Context.DragData);
        await OnDragEnterAsync(args);
        ShowDroppableStyle();
        if (await ShouldDropAsync(args))
        {
            canDrop = true;
        }
        else
        {
            canDrop = false;
        }
    }
    private async Task HandleDragLeave(DragEventArgs e)
    {
        if (Context == null || Context.DragData == null)
        {
            return;
        }

        var args = e.Create(Context.DragData);
        await OnDragLeaveAsync(e.Create(Context.DragData));
        HideDroppableStyle();
        canDrop = false;
    }
    private async Task HandleDrop(DragEventArgs e)
    {
        if (Context == null || Context.DragData == null)
        {
            return;
        }

        var args = e.Create(Context.DragData);
        if (await ShouldDropAsync(args))
        {
            await BeforeDropAsync(args);
            Items.Add(Context.DragData);
            Context?.DragItem?.OnDragComplete();
            await OnDropAsync(args);
        }
        HideDroppableStyle();
    }
}