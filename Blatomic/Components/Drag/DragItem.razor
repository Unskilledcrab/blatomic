@typeparam TData
@inject WindowService WindowService

@if (isShowing)
{
    <div class="@dragClass b-cursor-grab" 
         draggable="true" 
         @ref="dragElement"
         @ondragend="HandleDragEnd" 
         @ondragstart="HandleDragStart"
         @ontouchstart="HandleTouchStart"
         @ontouchmove="HandleTouchMove"
         @ontouchend="HandleTouchEnd" 
         @ontouchcancel="HandleTouchEnd">
        @ChildContent
    </div>
}

@code {
    [CascadingParameter] public DragContext<TData>? Context { get; set; }
    [CascadingParameter] public DropArea<TData>? DropArea { get; set; }

    [Parameter] public TData? DragData { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool Copy { get; set; } = false;

    private ElementReference dragElement;
    private string dragClass => isDragging ? "b-opacity-50" : string.Empty;
    private bool isShowing = true;
    private bool isDragging = false;
    private bool droppedInDropZone = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await WindowService.TouchDragScrollPrevention(dragElement);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void OnDragToDropZoneComplete()
    {
        droppedInDropZone = true;
    }

    private async Task HandleDragEnd(DragEventArgs e)
    {
        await EndDrag();
    }
    private async Task HandleTouchEnd(TouchEventArgs e)
    {
        await EndDrag(true, e);
    }

    private async Task EndDrag(bool isTouch = false, TouchEventArgs? e = null)
    {
        if (Context is not null)
        {
            if (isTouch && e != null)
            {
                await Context.OnTouchEnd(e);
            }
            Context.OnDragStop();
        }

        if (!Copy && droppedInDropZone)
        {
            if (DragData is not null && DropArea is not null)
            {
                DropArea.RemoveDragItem(DragData);
            }
            else 
            {
                isShowing = false;
            }
        }

        isDragging = false;        
        StateHasChanged();
    }

    private async Task HandleTouchMove(TouchEventArgs e)
    {
        if (Context is not null)
        {
            await Context.OnTouchMove(e);
        }
    }

    private async Task HandleTouchStart(TouchEventArgs e)
    {
        await StartDrag(touchArgs: e);
    }

    private async Task HandleDragStart(DragEventArgs e)
    {
        await StartDrag(dragArgs: e);
    }

    private async Task StartDrag(TouchEventArgs? touchArgs = null, DragEventArgs? dragArgs = null)
    {
        droppedInDropZone = false;
        isDragging = true;
        StateHasChanged();
        if (Context is not null)
        {
            await Context.OnDragStart(this, touchArgs, dragArgs);
        }
    }
}