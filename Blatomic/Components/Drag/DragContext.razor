@using System.Linq

@attribute [CascadingTypeParameter(nameof(TData))]
@typeparam TData

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    /// <summary>
    /// Set to true if you want to show all drop areas in the context, including where the user isn't able to drop with the item
    /// </summary>
    [Parameter] public bool ShowAllDropAreas { get; set; } = false;

    public TData? DragData => DragItem is not null ? DragItem.DragData : default(TData);
    public DragItem<TData>? DragItem { get; set; }
    public List<DropArea<TData>> DropAreas { get; set; } = new();

    private List<DropArea<TData>> InsideTouchDropArea = new();

    public async Task OnDragStart(DragItem<TData>? dragItem, TouchEventArgs? touchArgs = null, DragEventArgs? dragEventArgs = null)
    {
        if (dragItem == null)
        {
            return;
        }

        if (dragItem is DragItem<TData> item)
        {
            DragItem = item;

            if (item.DragData is TData data)
            {
                foreach (var dropArea in DropAreas)
                {
                    var isAlreadyInDropArea = item.DropArea != null && item.DropArea == dropArea;
                    DragArgs<TData> dragArgs = new DragArgs<TData>(data, touchArgs, dragEventArgs);

                    if (!isAlreadyInDropArea)
                    {                        
                        if (await dropArea.HandleCanDropAsync(dragArgs))
                        {
                            await dropArea.ShowDroppableStyleAsync(dragArgs);
                        }
                        else
                        {
                            if (ShowAllDropAreas)
                            {
                                await dropArea.ShowDroppableStyleAsync(dragArgs);
                            }
                        }
                    }
                }
                StateHasChanged();
            }
        }
    }

    public void OnDragStop()
    {
        DragItem = null;
        foreach (var dropArea in DropAreas)
        {
            dropArea.HideDroppableStyle();
        }
        StateHasChanged();
    }

    public async Task OnTouchMove(TouchEventArgs e)
    {
        var newInsideTouchDropArea = await GetAreasOverTouch(e)
                .Select(x => x.dropArea)
                .ToListAsync();

        var dragArgs = new DragArgs<TData>(e,DragData);
        foreach (var dropArea in InsideTouchDropArea.Except(newInsideTouchDropArea))
        {            
            await dropArea.HandleOnDragLeaveAsync(dragArgs);
        }
        foreach (var dropArea in newInsideTouchDropArea.Except(InsideTouchDropArea))
        {            
            await dropArea.HandleOnDragEnterAsync(dragArgs);
        }

        InsideTouchDropArea = newInsideTouchDropArea;
    }

    public async Task OnTouchEnd(TouchEventArgs e)
    {
        await foreach (var item in GetAreasOverTouch(e))
        {
            await item.dropArea.HandleDropAsync(new DragArgs<TData>(e,item.data));
        }
    }

    private async IAsyncEnumerable<(DropArea<TData> dropArea,TData data)> GetAreasOverTouch(TouchEventArgs e)
    {
        var endPoint = e.ChangedTouches[0];
        var endX = endPoint.ClientX;
        var endY = endPoint.ClientY;
        foreach (var dropArea in DropAreas)
        {
            var boundingClientRect = await dropArea.GetBoundingClientRect();
            var rectXstart = boundingClientRect.X;
            var rectXend = boundingClientRect.X + boundingClientRect.Width;
            var rectYstart = boundingClientRect.Y;
            var rectYend = boundingClientRect.Y + boundingClientRect.Height;

            var isInX = endX >= rectXstart && endX <= rectXend;
            var isInY = endY >= rectYstart && endY <= rectYend;

            if (isInX && isInY)
            {
                if (DragItem != null && DragItem.DragData is TData data)
                {
                    yield return (dropArea,data);
                }
            }
        }
    }
}
