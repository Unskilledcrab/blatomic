@using System.Timers
@using Blatomic.Services.Toasts

@implements IDisposable
@inject ToastService toastService
@inject ITheme Theme

<div class="fixed @Position.ToastStyle() p-4 rounded overflow-auto">
    <div class="flex flex-col space-y-4">
        @foreach (var toast in toasts)
        {
            @if (toast.IsShowing)
            {
                @if (ToastTemplate != null)
                {
                    <div>
                        @ToastTemplate(toast)
                    </div>
                }
                else
                {
                    <div class="max-w-sm shadow-lg dark:shadow-white/5 divide-y divide-gray-500 rounded bg-gray-200/80 dark:bg-gray-800/80 text-black dark:text-white">
                        <div class="flex justify-between items-center p-2">
                            <div class="flex items-center">
                                <span class="inline-block h-5 w-5 bg-blue-400 rounded mr-2"></span>
                                <b>@toast.Toast.Header</b>
                            </div>
                            <div class="ml-8">
                                <div class="cursor-pointer hover:text-white hover:bg-gray-300 p-1 rounded" @onclick="(() => RemoveToast(toast))">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                        <div class="p-2">
                            @toast.Toast.Message
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

@code {
    [Parameter] public CordinalPosition Position { get; set; } = CordinalPosition.BottomRight;
    [Parameter] public RenderFragment<ToastWrapper>? ToastTemplate { get; set; }

    private List<ToastWrapper> toasts = new();

    public void AddToast(Toast toast)
    {
        var toastWrapper = new ToastWrapper(toast);
        toasts.Add(toastWrapper);
        toastWrapper.Elapsed += TimedRemove;
        StateHasChanged();
    }

    private void TimedRemove(object? sender, ElapsedEventArgs e)
    {
        if (sender == null)
        {
            return;
        }
        var toastWrapper = (ToastWrapper)sender;
        RemoveToast(toastWrapper);
    }

    private async void RemoveToast(ToastWrapper toastWrapper)
    {
        toastWrapper.Elapsed -= TimedRemove;
        toasts.Remove(toastWrapper);
        toastWrapper.Dispose();
        await InvokeAsync(() => StateHasChanged());
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        toastService.OnAddToast += AddToast;
    }

    public void Dispose()
    {
        toastService.OnAddToast -= AddToast;
    }
}
