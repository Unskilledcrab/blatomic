@using System.Timers
<div class="fixed @Position.ToastStyle()">
    <div class="flex flex-col space-y-4">
        @foreach (var toast in toasts)
        {
            @if (toast.IsShowing)
            {
                @if (ToastTemplate != null)
                {
                    @ToastTemplate(toast)
                }
                else
                {
                    <div>
                        <div class="flex justify-between items-center">
                            <div>
                                @toast.Toast.Header
                            </div>
                            <div>
                                <div class="cursor-pointer hover:text-white hover:bg-gray-300 p-1 rounded" @onclick="(() => RemoveToast(toast))">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                        <div>
                            @toast.Toast.Message
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

@code {
    [Parameter] public CordinalPosition Position { get; set; } = CordinalPosition.BottomRight;
    [Parameter] public RenderFragment<ToastWrapper>? ToastTemplate { get; set; }

    private List<ToastWrapper> toasts = new();

    public void AddToast(Toast toast)
    {
        var toastWrapper = new ToastWrapper(toast);
        toasts.Add(toastWrapper);
        toastWrapper.Elapsed += TimedRemove;
    }

    private void TimedRemove(object? sender, ElapsedEventArgs e)
    {
        if (sender == null)
        {
            return;
        }
        var toastWrapper = (ToastWrapper)sender;
        RemoveToast(toastWrapper);
    }

    private void RemoveToast(ToastWrapper toastWrapper)
    {
        toastWrapper.Elapsed -= TimedRemove;
        toasts.Remove(toastWrapper);
        toastWrapper.Dispose();
    }

    public class ToastWrapper : IDisposable
    {
        public ToastWrapper(Toast toast)
        {
            Toast = toast;
            int readTime = (toast.Message.Length * 80) + 4000;

            timer = new System.Timers.Timer(readTime)
                {
                    AutoReset = false,
                    Enabled = true
                };

            timer.Elapsed += TimerOver;
        }

        public Toast Toast { get; set; }
        public bool IsShowing { get; set; } = true;
        public event ElapsedEventHandler? Elapsed;
        private System.Timers.Timer timer;

        private void TimerOver(object? sender, ElapsedEventArgs e)
        {
            IsShowing = false;
            Elapsed?.Invoke(sender, e);
        }

        public void StopTimer()
        {
            timer.Stop();
        }

        public void StartTimer()
        {
            timer.Start();
        }

        public void Dispose()
        {
            timer.Dispose();
        }
    }

    public class Toast
    {
        public string Header { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
    }
}
