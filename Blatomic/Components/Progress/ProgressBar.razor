@inject ITheme Theme

<div class="b-w-full b-h-fit b-bg-gray-200 b-rounded-full">
    <div class="b-transition-[width] @Size.GetStyle() b-flex b-justify-center b-items-center b-rounded-full @Palette?.All" style="width: @width">
        @if (percentage != 0)
        {
            @ChildContent
        }
    </div>
</div>

@code {
    private string width => $"{percentage}%";
    private double percentage = 0;
    [Parameter]
    public double Percentage
    {
        get => percentage;
        set
        {
            if (value < 0)
            {
                percentage = 0;
                PercentageChanged.InvokeAsync(percentage);
            }
            if (value > 100)
            {
                percentage = 100;
                PercentageChanged.InvokeAsync(percentage);
            }
            else
            {
                percentage = value;
            }
        }
    }    
    [Parameter]
    public EventCallback<double> PercentageChanged { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public ProgressBarSize Size { get; set; } = ProgressBarSize.Medium;
    [Parameter] public Palette? Palette { get; set; } 

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Palette == Palette)
        {
            Palette = Theme.Primary;
        }
    }
}
