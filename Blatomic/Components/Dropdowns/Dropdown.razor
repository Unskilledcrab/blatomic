@inject ITheme Theme

<div tabindex="0" 
     class="b-relative b-cursor-pointer"
     @onclick="(() => BoundIsOpen = !BoundIsOpen)"
     @onfocusout="(() => BoundIsOpen = false)">
        @ChildContent
    <div class="b-absolute b-cursor-auto b-z-10 @DropdownCss @Palette?.All @Shadow.Standard(ShadowType.Regular) @Position.AbsoluteStyle() @display"         
         @onclick:stopPropagation>
        @DropdownContent
    </div>
</div>

@code {
    [Parameter] public Position Position { get; set; } = Position.Bottom;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? DropdownContent { get; set; }
    [Parameter] public string? DropdownCss { get; set; }
    /// <summary>
    /// This palette is used to style the dropdown content since it is 
    /// absolutely positioned and can not inherit styling
    /// </summary>
    [Parameter] public Palette? Palette { get; set; }

    [Parameter] public bool IsOpen { get; set; } = false;
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    private bool BoundIsOpen
    {
        get => IsOpen;
        set
        {
            IsOpen = value;
            IsOpenChanged.InvokeAsync(value);
        }
    }
    private string display => BoundIsOpen ? "b-visible" : "b-hidden";

    protected override void OnInitialized()
    {
        if (Palette is null)
        {
            Palette = Theme.Light;
        }
        base.OnInitialized();
    }
}
