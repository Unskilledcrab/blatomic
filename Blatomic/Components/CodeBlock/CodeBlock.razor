@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Microsoft.CodeAnalysis.Text
@using Microsoft.AspNetCore.Razor
@using System.Text
@using Microsoft.JSInterop

@implements IAsyncDisposable

@inject ITheme Theme
@inject IJSRuntime JSRuntime

<div class="border @Theme.Light.Border.ToString() rounded-lg">
    <div class="bg-gray-800 text-gray-200 flex justify-between items-center py-2 px-4 rounded-t-lg">
        <p>@Title</p>
        <Button Color="@Theme.Light.ToString()"
                OnClickedAsync="CopyCodeToClipboard"
                RoundedStyle="RoundedStyle.L">
            @copyButtonText
        </Button>
    </div>
    <pre class="text-gray-400 bg-gray-900 rounded-b-lg p-2 overflow-x-auto">
        @if (!string.IsNullOrWhiteSpace(Code))
        {

            @((MarkupString)markup)
        }
    </pre>
</div>

@code {
    [Parameter] public string Code { get; set; } = string.Empty;
    [Parameter] public bool ShowLineNumber { get; set; } = true;
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public Language Language { get; set; } = Language.HTML;

    private string markup = string.Empty;
    private IJSObjectReference? module;
    private string copyButtonText = "Copy";

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(Code))
        {
            markup = new LanguageParser() 
            {
                ShowLineNumbers = ShowLineNumber 
            }.ParseCode(Code, Language.GetLanguage());
        }
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (module is null)
        {
            module = await JSRuntime.Import(this);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    private async Task CopyCodeToClipboard()
    {
        if (module is not null)
        {
            var error = await module.InvokeAsync<string>("CopyToClipboard", Code);
            if (error is not null)
            {
                copyButtonText = error;
            }
            else
            {
                copyButtonText = "Copied!";
                _ = ButtonReset();
            }
        }
    }

    private async Task ButtonReset()
    {
        await Task.Delay(1000);
        copyButtonText = "Copy";
        StateHasChanged();
    }   
}

