@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Microsoft.CodeAnalysis.Text
@using Microsoft.AspNetCore.Razor
@using System.Text
@using Microsoft.JSInterop
@using Blatomic.Services.JS

@implements IAsyncDisposable

@inject ITheme Theme
@inject ClipboardService ClipboardService

<div class="b-border @Theme.Light.Border.ToString() b-rounded-lg">
    <div class="b-bg-gray-800 b-text-gray-200 b-flex b-justify-between b-items-center b-py-2 b-px-4 b-rounded-t-lg">
        <p>@Title</p>
        <Button Palette="@Theme.Light"
                OnClickedAsync="CopyCodeToClipboard"
                RoundedStyle="RoundedStyle.L">
            @copyButtonText
        </Button>
    </div>
    <pre class="b-text-gray-400 b-bg-gray-900 b-rounded-b-lg b-p-2 b-overflow-x-auto">
        @if (!string.IsNullOrWhiteSpace(Code))
        {
            @((MarkupString)markup)
        }
    </pre>
</div>

@code {
    [Parameter] public string Code { get; set; } = string.Empty;
    [Parameter] public bool ShowLineNumber { get; set; } = true;
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public ILanguage Language { get; set; } = new CSharpLanguage();

    private string markup = string.Empty;
    private string copyButtonText = "Copy";

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrWhiteSpace(Code))
        {
            markup = new LanguageParser()
                {
                    ShowLineNumbers = ShowLineNumber
                }.ParseCode(Code, Language);
        }
        base.OnParametersSet();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await ClipboardService.DisposeAsync();
    }

    private async Task CopyCodeToClipboard()
    {
        var error = await ClipboardService.CopyToClipboard(Code);
        if (error is not null)
        {
            copyButtonText = error;
        }
        else
        {
            copyButtonText = "Copied!";
            _ = ButtonReset();
        }
    }

    private async Task ButtonReset()
    {
        await Task.Delay(1000);
        copyButtonText = "Copy";
        StateHasChanged();
    }
}

