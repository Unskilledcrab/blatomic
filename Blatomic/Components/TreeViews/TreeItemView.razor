@typeparam TData

@if (Item != null)
{
    <div class="b-border-l-4 b-border-l-blue-500 b-pl-3">
        <div>
            @if (Item.HasChildren())
            {
                <div class="inline b-cursor-pointer" @onclick="(() => ToggleCollapse())" @onclick:stopPropagation="true">
                @if (isCollapsed)
                {
                    @if (OpenTemplate != null)
                    {
                        @OpenTemplate(Item.Data)
                    }
                    else
                    {                    
                        @Plus.BasePlusSolid("b-h-5 b-w-5 b-inline b-mr-1")
                    }
                }
                else
                {    
                    @if (CloseTemplate != null)
                    {
                        @CloseTemplate(Item.Data)
                    }
                    else
                    {                    
                        @Minus.BaseMinusSolid("b-h-5 b-w-5 b-inline b-mr-1")
                    }
                }
                </div>
            }

            @if (ItemTemplate != null)
            {
                @ItemTemplate(Item.Data)
            }
        </div>
        <div>
            @foreach (var child in Item.GetChildrenItems())
            {
                <div class="b-ml-2 @collapsedStyle">
                    <TreeItemView CollapseAll="CollapseAll" ItemTemplate="ItemTemplate" OpenTemplate="OpenTemplate" CloseTemplate="CloseTemplate" Item="@child" />
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public ITreeItem<TData>? Item { get; set; }
    [Parameter] public RenderFragment<TData>? ItemTemplate { get; set; }
    [Parameter] public RenderFragment<TData>? OpenTemplate { get; set; }
    [Parameter] public RenderFragment<TData>? CloseTemplate { get; set; }
    [Parameter] public bool CollapseAll { get; set; } = false;

    private bool isSelfCollapsed = true;
    private bool isCollapsed => isSelfCollapsed || CollapseAll;
    private string collapsedStyle => isCollapsed ? "b-hidden" : "b-visible";

    public void ToggleCollapse()
    {
        isSelfCollapsed = !isSelfCollapsed;
    }
}
