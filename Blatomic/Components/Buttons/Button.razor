@inherits BaseComponent

<button type="@Type" class="@css" style="@style" disabled="@isDisabled" @onclick="@ClickHandler">
    @InnerContent()
</button>

@code {
    private bool isDisabled => IsDisabled || (IsLoading && DisableWhenLoading);
    private string disabledStyle => isDisabled ? "cursor-wait" : string.Empty;

    [Parameter] public RenderFragment? LoadingTemplate { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public EventCallback OnClickedAsync { get; set; }
    [Parameter] public ButtonType Type { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool DisableWhenLoading { get; set; } = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        AddCssStyle("inline-flex");
        AddCssStyle("items-center");
        AddCssStyle("px-4");
        AddCssStyle("py-2");
        AddCssStyle("font-semibold");
        AddCssStyle("leading-5");
        AddCssStyle("text-sm");
        AddCssStyle("text-white");
        AddCssStyle("transition");
    }

    private async Task ClickHandler()
    {
        if (IsLoading)
        {
            return;
        }

        try
        {
            IsLoading = true;
            AddCssStyle(disabledStyle);
            await OnClickedAsync.InvokeAsync();
        }
        finally
        {
            RemoveCssStyle(disabledStyle);
            IsLoading = false;
        }
    }

    private RenderFragment? InnerContent()
    {
        if (IsLoading)
        {
            if (LoadingTemplate != null)
            {
                return LoadingTemplate;
            }
            return LoadingFragment();
        }

        return ChildContent;
    }

    private RenderFragment LoadingFragment()
    {
        return
    @<span class="inline-flex items-center">@Loader.ButtonLoader @ChildContent</span>
    ;
    }
}
