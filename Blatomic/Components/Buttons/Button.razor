@inherits BaseComponent

<button type="@Type" class="@Color @css" style="@style" disabled="@isDisabled" @onclick="@ClickHandler">
    @InnerContent()
</button>

@code {
    private bool isDisabled => IsDisabled || (IsLoading && DisableWhenLoading);

    [Parameter] public string Color { get; set; } = "text-slate-900 bg-slate-100 dark:text-slate-100 dark:bg-slate-900";
    [Parameter] public RenderFragment? LoadingTemplate { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public EventCallback OnClickedAsync { get; set; }
    [Parameter] public ButtonType Type { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool DisableWhenLoading { get; set; } = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        AddCssStyle("inline-flex");
        AddCssStyle("items-center");
        AddCssStyle("px-4");
        AddCssStyle("py-2");
        AddCssStyle("font-semibold");
        AddCssStyle("leading-5");
        AddCssStyle("text-sm");
        AddCssStyle("transition");
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        UpdateDisabledStyle();
    }

    private void UpdateDisabledStyle()
    {
        if (IsLoading)
        {
            AddCssStyle("cursor-wait");
        }
        else
        {
            RemoveCssStyle("cursor-wait");            
        }
        if (isDisabled)
        {
            AddCssStyle("opacity-75");
            if (!IsLoading)
            {
                AddCssStyle("cursor-not-allowed");
            }
        }
        else
        {
            RemoveCssStyle("opacity-75");
            if (!IsLoading)
            {
                RemoveCssStyle("cursor-not-allowed");
            }
        }
    }

    private async Task ClickHandler()
    {
        if (IsLoading)
        {
            return;
        }

        try
        {
            IsLoading = true;
            UpdateDisabledStyle();
            await OnClickedAsync.InvokeAsync();
            StateHasChanged();
        }
        finally
        {
            IsLoading = false;
            UpdateDisabledStyle();
        }
    }

    private RenderFragment? InnerContent()
    {
        if (IsLoading)
        {
            if (LoadingTemplate != null)
            {
                return LoadingTemplate;
            }
            return LoadingFragment();
        }

        return ChildContent;
    }

    private RenderFragment LoadingFragment()
    {
        return
    @<span class="inline-flex items-center">@Loader.ButtonLoader @ChildContent</span>
    ;
    }
}
