@inherits BaseComponent

@inject ITheme Theme

<button type="@Type" class="@Palette?.All @css" style="@style" disabled="@isDisabled" @onclick="@ClickHandler">
    @InnerContent()
</button>

@code {
    private bool isDisabled => IsDisabled || (IsLoading && DisableWhenLoading);

    [Parameter] public Palette? Palette { get; set; }
    [Parameter] public RenderFragment? LoadingTemplate { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public EventCallback OnClickedAsync { get; set; }
    [Parameter] public ButtonType Type { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool DisableWhenLoading { get; set; } = true;

    protected override void OnInitialized()
    {
        if (Palette is null)
        {
            Palette = Theme.Primary;
        }

        base.OnInitialized();

        AddCssStyle("b-inline-flex");
        AddCssStyle("b-items-center");
        AddCssStyle("b-px-4");
        AddCssStyle("b-py-2");
        AddCssStyle("b-font-semibold");
        AddCssStyle("b-leading-5");
        AddCssStyle("b-text-sm");
        AddCssStyle("b-transition");
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        UpdateDisabledStyle();
    }

    private void UpdateDisabledStyle()
    {
        if (IsLoading)
        {
            AddCssStyle("b-cursor-wait");
        }
        else
        {
            RemoveCssStyle("b-cursor-wait");            
        }
        if (isDisabled)
        {
            AddCssStyle("b-opacity-75");
            if (!IsLoading)
            {
                AddCssStyle("b-cursor-not-allowed");
            }
        }
        else
        {
            RemoveCssStyle("b-opacity-75");
            if (!IsLoading)
            {
                RemoveCssStyle("b-cursor-not-allowed");
            }
        }
    }

    private async Task ClickHandler()
    {
        if (IsLoading)
        {
            return;
        }

        try
        {
            IsLoading = true;
            UpdateDisabledStyle();
            await OnClickedAsync.InvokeAsync();
            StateHasChanged();
        }
        finally
        {
            IsLoading = false;
            UpdateDisabledStyle();
        }
    }

    private RenderFragment? InnerContent()
    {
        if (IsLoading)
        {
            if (LoadingTemplate != null)
            {
                return LoadingTemplate;
            }
            return LoadingFragment();
        }

        return ChildContent;
    }

    private RenderFragment LoadingFragment()
    {
        return
    @<span class="b-inline-flex b-items-center">@Loader.ButtonLoader @ChildContent</span>
    ;
    }
}
