@inject ITheme Theme

<div tabindex="0" class="b-p-4 flex b-justify-between b-items-center b-cursor-pointer b-border-b b-border-gray-300 b-transition focus:b-ring-4 @headShowStyle" @onclick="ToggleBody">
    <div>
        @Header
    </div>
    <div>
        <svg xmlns="http://www.w3.org/2000/svg" class="b-h-6 b-w-6 b-transition b-duration-300 @svgClass" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
    </div>
</div>
<div class="b-transition-[max-height] b-duration-300 @bodyGrow b-overflow-hidden">
    <div class="b-p-4 b-border-b b-border-gray-300">
        @Body
    </div>
</div>


@code {
    [CascadingParameter] public AccordionContext? Parent {get; set;}
    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public RenderFragment? Body { get; set; }
    [Parameter] public Palette? Palette { get; set; }
    [Parameter] public string ShowHeaderStyle { get; set; } = "b-bg-blue-200 b-text-blue-600";

    private bool isShowing = false;
    private string bodyGrow => isShowing ? "b-max-h-96" : "b-max-h-0";
    private string svgClass => isShowing ? "b-rotate-180" : "b-rotate-0";
    private string headShowStyle => isShowing ? ShowHeaderStyle : string.Empty;

    protected override void OnInitialized()
    {
        Parent?.AddChild(this);

        if (Palette is null)
        {
            Palette = Theme.Form;
        }

        base.OnInitialized();
    }

    public void ToggleBody()
    {
        var showing = !isShowing;
        Parent?.OnToggleChild();
        isShowing = showing;
    }

    public void HideBody()
    {
        isShowing = false;
    }

    public void ShowBody()
    {
        isShowing = true;
    }
}
