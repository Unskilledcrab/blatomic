@typeparam TData
@inject ITheme Theme

<div tabindex="0"
     class="@Palette?.All"
     @onfocus="(() => BoundIsOpen = true)"
     @onfocusout="(() => BoundIsOpen = false)">
    <Dropdown @bind-IsOpen="BoundIsOpen"
              Palette="Palette"
              Position="Position">
        <ChildContent>
            <div class="b-flex b-justify-between b-items-center">
                <div>
                    @if (BoundSelectedItem == null && BoundSelectedItems.IsNullOrEmpty())
                    {
                        @PlaceHolderTemplate
                    }
                    else if (SelectedTemplate != null && BoundSelectedItem != null)
                    {
                        @SelectedTemplate(BoundSelectedItem)
                    }
                    else if (SelectedItemsTemplate != null && BoundSelectedItems.HasAny())
                    {
                        @SelectedItemsTemplate(BoundSelectedItems)
                    }
                    else if (ItemTemplate != null && BoundSelectedItem != null)
                    {
                        @ItemTemplate(BoundSelectedItem)
                    }
                </div>
                @Down.BaseDownSolid("b-shrink-0 b-h-10 b-w-10 b-px-2")
            </div>
        </ChildContent>
        <DropdownContent>
            @if (ItemTemplate != null && Items != null)
            {
                @foreach (var item in internalItems)
                {
                    <div @onclick="(() => OnSelectedItem(item))"
                         class="@(item.IsSelected ? SelectedPalette?.All : DefaultStyle) b-cursor-pointer">
                        @ItemTemplate(item.Data)
                    </div>
                }
            }
        </DropdownContent>
    </Dropdown>
</div>

@code {
    [Parameter] public Palette? Palette { get; set; }
    [Parameter] public string DefaultStyle { get; set; } = "hover:b-bg-blue-300";
    [Parameter] public Palette? SelectedPalette { get; set; }
    [Parameter] public RenderFragment? PlaceHolderTemplate { get; set; }
    [Parameter] [EditorRequired] public RenderFragment<TData?>? ItemTemplate { get; set; }
    [Parameter] public RenderFragment<TData>? SelectedTemplate { get; set; }
    [Parameter] public RenderFragment<IEnumerable<TData?>>? SelectedItemsTemplate { get; set; }
    [Parameter] [EditorRequired] public IEnumerable<TData?>? Items { get; set; }
    [Parameter] public bool IsMultiSelect { get; set; } = false;
    [Parameter] public Position Position { get; set; } = Position.Bottom;

    [Parameter] public bool IsOpen { get; set; } = false;
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    private bool BoundIsOpen
    {
        get => IsOpen;
        set
        {
            IsOpen = value;
            IsOpenChanged.InvokeAsync(value);
        }
    }

    [Parameter] public TData? SelectedItem { get; set; }
    [Parameter] public EventCallback<TData?> SelectedItemChanged { get; set; }
    private TData? BoundSelectedItem
    {
        get => SelectedItem;
        set
        {
            SelectedItem = value;
            SelectedItemChanged.InvokeAsync(value);
        }
    }

    [Parameter] public IEnumerable<TData?>? SelectedItems { get; set; }
    [Parameter] public EventCallback<IEnumerable<TData?>> SelectedItemsChanged { get; set; }
    private IEnumerable<TData?>? BoundSelectedItems
    {
        get => SelectedItems;
        set
        {
            SelectedItems = value;
            SelectedItemsChanged.InvokeAsync(value);
        }
    }

    class SelectItem
    {
        public bool IsSelected { get; set; } = false;
        public TData? Data { get; set; }
    }

    private List<SelectItem> internalItems = new();

    protected override void OnInitialized()
    {
        if (Palette is null)
        {
            Palette = Theme.Form;
        }
        if (SelectedPalette is null)
        {
            SelectedPalette = Theme.Primary;
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        internalItems.Clear();
        if (Items == null)
        {
            return;
        }

        foreach (var item in Items)
        {
            if ((BoundSelectedItems != null && BoundSelectedItems.Contains(item)) || (BoundSelectedItem != null && BoundSelectedItem.Equals(item)))
            {
                internalItems.Add(new SelectItem { IsSelected = true, Data = item });
            }
            else
            {
                internalItems.Add(new SelectItem { IsSelected = false, Data = item });
            }
        }
    }

    private void OnSelectedItem(SelectItem item)
    {
        if (!IsMultiSelect)
        {
            internalItems.ForEach(i => i.IsSelected = false);
            item.IsSelected = true;
            BoundSelectedItem = item.Data;
            BoundIsOpen = false;
            return;
        }

        var selectedItem = internalItems.First(i => i == item);
        selectedItem.IsSelected = !selectedItem.IsSelected;
        BoundSelectedItems = internalItems.Where(i => i.IsSelected).Select(i => i.Data);
    }
}
