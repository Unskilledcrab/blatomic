<div class="fixed @visible transition-opacity duration-300 z-40 top-0 left-0 w-full h-full overflow-auto bg-black/50" @onclick="() => BoundIsShowing = !IsShowing">
    <div class="@size @margin bg-white shadow-md flex flex-col" @onclick:stopPropagation="true">
        <div class="flex justify-between items-center bg-gray-200 p-4">
            <div>
                @Header
            </div>
            <div class="cursor-pointer" @onclick="() => BoundIsShowing = !IsShowing">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </div>
        </div>
        <div class="p-4 grow">
            @Body
        </div>
        @if (Footer != null)
        {
            <div class="p-4 bg-gray-200">
                @Footer
            </div>
        }
    </div>
</div>

@code {
    private string visible => IsShowing ? "visible opacity-100" : "invisible opacity-0";
    private string size => Size.GetStyle();
    private string margin => Size == ModalSize.Full ? "h-full" : "mt-4 rounded-md";

    
    private bool BoundIsShowing
    {
        get => IsShowing;
        set 
        {
            IsShowing = value;
            IsShowingChanged.InvokeAsync(value);
        }
    }
    [Parameter] public bool IsShowing { get; set; } = false;
    [Parameter] public EventCallback<bool> IsShowingChanged { get; set; }

    [Parameter] public ModalSize Size { get; set; } = ModalSize.Medium;
    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public RenderFragment? Body { get; set; }
    [Parameter] public RenderFragment? Footer { get; set; } = null;
}
