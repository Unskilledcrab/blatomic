@inject ITheme Theme

@if (BoundIsShowing)
{
    <Backdrop OnBackdropClick="() => BoundIsShowing = !BoundIsShowing">
        <div class="@size @margin @Palette?.All @Shadow.Standard(ShadowType.Medium) b-flex b-flex-col" @onclick:stopPropagation="true">
            <div class="b-shrink-0 b-flex b-justify-between b-items-center b-p-4 @border">
                <div>
                    @if (Header != null)
                    {
                        @Header
                    }
                </div>
                <DismissButton OnClickAsync="() => BoundIsShowing = !BoundIsShowing" />
            </div>
            <div class="b-p-4 b-grow">
                @Body
            </div>
            @if (Footer != null)
            {
                <div class="b-shrink-0 b-p-4 b-border-t">
                    @Footer
                </div>
            }
        </div>
    </Backdrop>
}

@code {
    private bool BoundIsShowing
    {
        get => IsShowing;
        set
        {
            IsShowing = value;
            IsShowingChanged.InvokeAsync(value);
        }
    }
    [Parameter] public bool IsShowing { get; set; } = false;
    [Parameter] public EventCallback<bool> IsShowingChanged { get; set; }

    [Parameter] public Palette? Palette { get; set; }
    [Parameter] public ModalSize Size { get; set; } = ModalSize.Medium;
    [Parameter] public RenderFragment? Header { get; set; } = null;
    [Parameter] public RenderFragment? Body { get; set; }
    [Parameter] public RenderFragment? Footer { get; set; } = null;

    private string size => Size.GetStyle();
    private string margin => Size == ModalSize.Full ? "b-h-full" : "b-mt-4 b-rounded-md";
    private string border => Header != null ? "b-border-b" : string.Empty;

    protected override void OnInitialized()
    {
        if (Palette is null)
        {
            Palette = Theme.Form;
        }
        base.OnInitialized();
    }
}
