@typeparam TData
<div class="b-flex b-w-full b-h-full b-m-[2px]">
    <MapSector TData="TData"
               MapProperty="MapProperty"
               DataTemplate="DataTemplate"
               Items="@(Data.OrderByDescending(x => MapProperty(x)).ToList())"
               Total="@(items.Sum())" />
</div>


@code {
    [Parameter] [EditorRequired] public IEnumerable<TData>? Data { get; set; }
    [Parameter] [EditorRequired] public Func<TData, double> MapProperty { get; set; } = (data) => 0;
    [Parameter] public Func<TData, IEnumerable<TData>>? ChildProperty { get; set; }
    [Parameter] public RenderFragment<MapData>? DataTemplate { get; set; }

    private List<TreeNode> treeNodes = new List<TreeNode>();
    private double width = 10;
    private double height = 10;

    public class MapData
    {
        public TData? Data { get; set; }
        public double Percentage { get; set; }
    }

    public double GetNodeValue(TreeNode treeNode)
    {
        double value = 0;
        if (treeNode.Children.Any())
        {
            foreach (var child in treeNode.Children)
            {
                value += GetNodeValue(child);
            }
            return value;
        }
        return MapProperty(treeNode.Data);
    }

    public enum Direction
    {
        Row,
        Column
    }

    public class TreeNode
    {
        public TData Data { get; set; }
        public List<TreeNode> Children { get; set; } = new();
        public double Height { get; set; } = 0;
        public double Width { get; set; } = 0;
    }

    private void SquarifyTree()
    {
        SquarifySector(treeNodes, width, height);
    }

    private double AspectRatio(double height, double width)
    {
        return Math.Abs(height - width);
    }

    private void SquarifySector(List<TreeNode> sectorNodes, double width, double height)
    {
        // First find out what direction this sector will be going in
        var total = sectorNodes.Sum(node => GetNodeValue(node));
        var firstNodeValue = GetNodeValue(sectorNodes.First());

        var percentage = firstNodeValue / total;

        var proposedWidth = width * percentage;
        var proposedHeight = height * percentage;

        var widthRatio = AspectRatio(height, proposedWidth);
        var heightRatio = AspectRatio(proposedHeight, width);

        var isColumn = widthRatio < heightRatio ? true : false;
        var direction = isColumn ? Direction.Column : Direction.Row;
        var previousLowestRatio = widthRatio < heightRatio ? widthRatio : heightRatio;
        var newLowestRatio = previousLowestRatio;
        var nodesInsideSector = 1;

        // Try to fit as many items in that sector without sacrifying aspect ratio
        var calculatedWidth = width;
        var calculatedHeight = height;
        var totalSectorValue = firstNodeValue;

        if (direction == Direction.Column)
        {
            calculatedWidth = proposedWidth;
        }
        else
        {
            calculatedHeight = proposedHeight;
        }

        while (newLowestRatio <= previousLowestRatio)
        {
            nodesInsideSector += 1;
            var nodeValue = GetNodeValue(sectorNodes[nodesInsideSector - 1]);
            totalSectorValue += nodeValue;
            var nodePercentage = nodeValue / totalSectorValue;

            if (direction == Direction.Column)
            {
                calculatedWidth += width * nodePercentage;
            }
            else
            {
                calculatedHeight += height * nodePercentage;
            }

            for (var nodeIndex = 0; nodeIndex < nodesInsideSector; nodeIndex++)
            {
                var insideNodeValue = GetNodeValue(sectorNodes[nodeIndex]);
                var insideNodePercentage = insideNodeValue / totalSectorValue;

                var insideNodeHeight = calculatedHeight * insideNodePercentage;
                var insideNodeWidth = calculatedWidth * insideNodePercentage;

                var insideNodeWidthRatio = AspectRatio(calculatedHeight,insideNodeWidth);
                var insideNodeHeightRatio = AspectRatio(insideNodeHeight,calculatedWidth);
            }
        }
    }

    private void CreateTreeNodes()
    {
        if (Data is null)
        {
            return;
        }

        foreach (var item in Data)
        {
            treeNodes.Add(ConvertItemToNode(item));
        }
    }

    private TreeNode ConvertItemToNode(TData data)
    {
        var node = new TreeNode { Data = data };

        if (ChildProperty != null)
        {
            foreach (var child in ChildProperty(data))
            {
                node.Children.Add(ConvertItemToNode(child));
            }
        }

        return node;
    }

    private IEnumerable<double> items
    {
        get
        {
            if (Data is null || MapProperty is null)
            {
                yield break;
            }

            foreach (var item in Data)
            {
                yield return MapProperty(item);
            }
        }
    }
}
